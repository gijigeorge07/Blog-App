{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\datas\\\\Blog project\\\\MERN-Assignment-frontend-main\\\\src\\\\components\\\\article\\\\Article.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport Comments from \"./Comments\";\nimport Upvote from \"./Upvote\";\nimport AddComments from \"./AddComments\";\nimport ErrorPage from \"../error/Error\";\nimport \"./Article.css\";\nimport Preloader from \"./PreLoader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Article = _ref => {\n  _s();\n\n  let {\n    token\n  } = _ref;\n  const {\n    id\n  } = useParams();\n  const [articleData, setArticleData] = useState({\n    title: \"\",\n    description: \"\",\n    name: \"\",\n    upvoters: [],\n    comments: []\n  });\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetchAPI();\n  }, [id]);\n\n  async function fetchAPI() {\n    const response = await fetch(`/api/posts/${id}`, {\n      method: \"get\",\n      headers: {\n        Authorization: `Bearer ${token.token}`\n      }\n    });\n    const body = await response.json();\n    if (body !== {\n      status: \"Error\"\n    }) setArticleData(body);\n    setLoading(false);\n  }\n\n  if (!articleData.title) return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Preloader, {\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ErrorPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blogPost\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"postTitle\",\n      children: articleData.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"postAuthor\",\n      children: [\"Author :- \", articleData.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Upvote, {\n      id: id,\n      setArticleData: setArticleData,\n      upvoters: articleData.upvoters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      className: \"postDescr\",\n      children: articleData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Comments, {\n      comments: articleData.comments\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddComments, {\n      id: id,\n      setArticleData: setArticleData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Article, \"6iQPpZR1UGbCjevR5LBGy4Z2qOU=\", false, function () {\n  return [useParams];\n});\n\n_c = Article;\nexport default Article;\n\nvar _c;\n\n$RefreshReg$(_c, \"Article\");","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/datas/Blog project/MERN-Assignment-frontend-main/src/components/article/Article.js"],"names":["React","useEffect","useState","useParams","Comments","Upvote","AddComments","ErrorPage","Preloader","Article","token","id","articleData","setArticleData","title","description","name","upvoters","comments","loading","setLoading","fetchAPI","response","fetch","method","headers","Authorization","body","json","status"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAO,eAAP;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;;AAEA,MAAMC,OAAO,GAAG,QAAe;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AAC7B,QAAM;AAAEC,IAAAA;AAAF,MAASR,SAAS,EAAxB;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC;AAC7CY,IAAAA,KAAK,EAAE,EADsC;AAE7CC,IAAAA,WAAW,EAAE,EAFgC;AAG7CC,IAAAA,IAAI,EAAE,EAHuC;AAI7CC,IAAAA,QAAQ,EAAE,EAJmC;AAK7CC,IAAAA,QAAQ,EAAE;AALmC,GAAD,CAA9C;AAOA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBlB,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,QAAQ;AACT,GAFQ,EAEN,CAACV,EAAD,CAFM,CAAT;;AAIA,iBAAeU,QAAf,GAA0B;AACxB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,cAAaZ,EAAG,EAAlB,EAAqB;AAC/Ca,MAAAA,MAAM,EAAE,KADuC;AAE/CC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAAShB,KAAK,CAACA,KAAM;AAD9B;AAFsC,KAArB,CAA5B;AAMA,UAAMiB,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAnB;AACA,QAAID,IAAI,KAAK;AAAEE,MAAAA,MAAM,EAAE;AAAV,KAAb,EAAkChB,cAAc,CAACc,IAAD,CAAd;AAClCP,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AAED,MAAI,CAACR,WAAW,CAACE,KAAjB,EACE,oBACE;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,OAAO,EAAEK;AAApB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAOF,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,WAAd;AAAA,gBAA2BP,WAAW,CAACE;AAAvC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA,+BAAsCF,WAAW,CAACI,IAAlD;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,MAAD;AACE,MAAA,EAAE,EAAEL,EADN;AAEE,MAAA,cAAc,EAAEE,cAFlB;AAGE,MAAA,QAAQ,EAAED,WAAW,CAACK;AAHxB;AAAA;AAAA;AAAA;AAAA,YAHF,eAQE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBAA4BL,WAAW,CAACG;AAAxC;AAAA;AAAA;AAAA;AAAA,YARF,eASE,QAAC,QAAD;AAAU,MAAA,QAAQ,EAAEH,WAAW,CAACM;AAAhC;AAAA;AAAA;AAAA;AAAA,YATF,eAUE,QAAC,WAAD;AAAa,MAAA,EAAE,EAAEP,EAAjB;AAAqB,MAAA,cAAc,EAAEE;AAArC;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAjDD;;GAAMJ,O;UACWN,S;;;KADXM,O;AAmDN,eAAeA,OAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport Comments from \"./Comments\";\nimport Upvote from \"./Upvote\";\nimport AddComments from \"./AddComments\";\nimport ErrorPage from \"../error/Error\";\nimport \"./Article.css\";\nimport Preloader from \"./PreLoader\";\n\nconst Article = ({ token }) => {\n  const { id } = useParams();\n  const [articleData, setArticleData] = useState({\n    title: \"\",\n    description: \"\",\n    name: \"\",\n    upvoters: [],\n    comments: [],\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchAPI();\n  }, [id]);\n\n  async function fetchAPI() {\n    const response = await fetch(`/api/posts/${id}`, {\n      method: \"get\",\n      headers: {\n        Authorization: `Bearer ${token.token}`,\n      },\n    });\n    const body = await response.json();\n    if (body !== { status: \"Error\" }) setArticleData(body);\n    setLoading(false);\n  }\n\n  if (!articleData.title)\n    return (\n      <>\n        <Preloader loading={loading} />\n        <ErrorPage />\n      </>\n    );\n\n  return (\n    <div className=\"blogPost\">\n      <h1 className=\"postTitle\">{articleData.title}</h1>\n      <h2 className=\"postAuthor\">Author :- {articleData.name}</h2>\n      <Upvote\n        id={id}\n        setArticleData={setArticleData}\n        upvoters={articleData.upvoters}\n      />\n      <pre className=\"postDescr\">{articleData.description}</pre>\n      <Comments comments={articleData.comments} />\n      <AddComments id={id} setArticleData={setArticleData} />\n    </div>\n  );\n};\n\nexport default Article;\n"]},"metadata":{},"sourceType":"module"}